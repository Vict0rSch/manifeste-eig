#+title: Améliorer : privilégier des cycles courts, un maintien continu et une évolution constante

* Idée générale

Le besoin de remplacement apparaît en général lorsque la dette
technique est trop importante, que la solution n'a pas évolué depuis
trop longtemps, que toutes les personnes qui ont travaillé au
développement de la version actuelle ont changé de poste, et qu'on
préfère repartir de zéro (aussi pour se dire que le nouveau chef
apporte du changement... non du remplacement).

Se placer dans une logique d'amélioration demande de s'opposer à la
logique statique de la souscription à un produit pour X années,
produit souvent intégré par des prestataires, entraînant une forte
dépendance technique et rendant difficiles les évolutions à venir.

* Diagnostic et proposition pour l'avenir

- Cycles d'évolution courts (issues, itérations fréquentes sur la base
  des bugs remontés et améliorations proposées) vs longs

- Coûts : réguliers et faibles (qqETP, UX/UI remontés par les
  utilisateurs) vs très élevés rarement (rares parce que très élevés)
  long processus de définition des besoins, du cahier des charges
  avant de réaliser (ou sélectionner) le produit

- Dette technique : risque si départ des personnes compétentes mais
  documenté et code dispo en interne vs systématique.

* Exemple

http://www.data.drees.sante.gouv.fr cette solution web HTML4 s'appuie
sur un framework web commercial Beyong20/20, impossible de le faire
évoluer librement, tout est facturé.

EMBLEM => R, lorsque je teste un outil commercial ou opensource, je
découvre de nouvelles façon d'explorer, visualiser, modéliser les
données.  Pour les intégrer/implémenter/reproduire, il n'est pas
nécessaire de changer de solution ie remplacer la solution actuelle.
On peut implémenter la fonctionnalité (développement AXAML) ou créer
une API entre un outil et un autre (library R/Python, exemple des
dataviz D3.js).
