#+title: Améliorer : privilégier des cycles courts, un maintien continu et une évolution constante

* Idée générale

Le besoin de remplacement apparaît en général lorsque la dette
technique est trop importante, que la solution n'a pas évolué depuis
trop longtemps, que toutes les personnes qui ont travaillé au
développement de la version actuelle ont changé de poste, et qu'on
préfère repartir de zéro 

?? (aussi pour se dire que le nouveau chef
apporte du changement... non du remplacement).

Se placer dans une logique d'amélioration demande de s'opposer à la
logique statique de la souscription à un produit pour X années,
produit souvent intégré par des prestataires, entraînant une forte
dépendance technique et rendant difficiles les évolutions à venir.

* Diagnostic

Les trois dimensions principales de ce mode de conception sont le cycle de vie du projet, son coût et la dette technique qu'il pourrait engendrer.

Le processus d'amélioration est associé à des cycles d'évolution courts: remontée de bug et de demandes d'amélioration par les utilisateurs, itérations fréquentes pour les implémenter etc. A l'inverse le processus de remplacement s'impose dans un contexte de construction d'une "expression du besoin", suivi d'une rédaction d'un "cahier des charges" puis de phases de recette avant de délivrer (plusieurs années plus tard) un produit.

Lorsqu'on tend à remplacer entièrement les solutions en place, on fait face à des coûts sporadiques, rares et très élevés. À contrario lorsqu'on pense les projets dans une optique d'amélioration, les coûts sont plus réguliers et plus faibles.

Enfin, lorsqu'un projet et refondu entièrement, un risque apparaît en cas de départ de toutes les personnes compétentes. 
En effet, le développement étant en général sous-traité et réalisé dans une technologie propriétaire, le code n'est pas disponible, l'administration est tributaire du prestataire et la dette technique est donc élevée. Un produit documenté et dont le code source est disponible permettent une réappropriation de l'outil. 

>>> Le parallèle remplacement / amélioration dans ce dernier cas est un peu bancal, c'est plus open/closed source

* Proposition pour l'avenir

Nous recommandons une approche itérative et continue visant à délivrer
une première version minimale du produit rapidement avec une
vision technique adaptée: il faut s'appuyer d'emblée sur la technologie pertinente pour
les ambitions du produit. Par exemple si le produit vise une grande
audience, il faut anticiper le passage à l'échelle en choisissant une
architecture adaptée. Ces contraintes ont cependant
un coût il est donc nécessaire de bien mesurer ses ambitions et ne pas
choisir les technologies les plus robustes et les plus performantes
*par défaut*. En effet, ces technologies sont souvent les moins adaptées
au développement rapide d'une "première version minimale du produit".

* Exemple

# FIXME: ne choisir qu'un seul exemple

Dans la branche spécifique de la tarificaton en assurance, on calibre
des modèles linéaires généralisés afin d'ajuster la prime aux risques.
Pour cela, certains assureurs utilisent des outils commerciaux "clef
en main" et qui fonctionnent en "clic-bouton". Aucune amélioration ou
appropriation n'est possible. Le retour à des langages de
programmation, par exemple R, peut être douloureux pour les statisticiens mais leur rend le contrôle sur la manipulation des données.

Lorsque l'on teste un outil alternatif et que l'on découvre de nouvelles façon d'explorer, visualiser, modéliser les données, on se retrouve souvent dans l'une de ces situations:

- Si on utilise une solution propriétaire et qu'on est séduit par les
  fonctionnalités d'une autre solution on doit soit changer de
  solution soit utiliser les 2.

- Si on utilise une solution open source on peut par contre intégrer ces méthodes
  et idées, il n'est pas forcément nécessaire de changer de solution (c'est à dire
  remplacer la solution actuelle).  On peut implémenter la
  fonctionnalité ou créer une communication entre un outil et un autre.
