#+title: Composer : créer des services interopérables pour gagner en souplesse

* Idées générales

# FIXME: voir s'il est utile d'introduire d'une façon aussi imagée.

# FIXME: condenser les parties trop longues.

Créer des composants génériques bénéficie plus à la communauté que de
construire une solution entière d'un seul coup: votre problème précis est certainement unique! Mais ses composants principaux ne le sont probablement pas. En découpant le projet initial en sous-composants vous retrouverez des problèmes affrontés par d'autres, vous permettant d'apprendre d'eux ou de leur transmettre votre solution. Dans le meilleur des cas, un composant essentiel à votre solution existe même déjà.

* Diagnostic / constat

Un projet avec une composante numérique part en général de
l'expression d'un besoin métier précis : une cible d'utilisateurs ou
des jeux de données sont déjà à peu près identifiés, et on a une première idée des livrables. 
Il est alors tentant de ne chercher à répondre
qu'aux besoins initiaux. Mais c'est
oublier que le problème que l'on rencontre dans son propre métier est
ou a déjà probablement été rencontré dans d'autres services, que cela soit dans sa
propre administration ou non.

On se prive alors dès le début du projet d'un grand nombre de
ressources potentielles : les personnes qui dans le passé ont déjà
rencontré ce même problème pourraient apporter leurs retours
d'expériences sur leur approche, les solutions développées pourraient être
adaptées et faire gagner du temps dans le développement du projet. De plus
ces mêmes personnes pourraient demain être en mesure de
contribuer et d'améliorer les solutions choisies.

À l'inverse, aborder son propre projet en cherchant à le rendre le
plus générique possible et chercher à intégrer toutes les
possibilités de personnalisations et d'adaptations dès le début risque
d'alourdir le projet jusqu'à l'inefficacité: il
est probablement impossible d'aboutir à des solutions 100% génériques.

La généricité d'un projet numérique est ainsi autant une question de
méthodologie que de choix. Il est essentiel d'envisager les potentiels
de réutilisation de sa solution afin de toucher une communauté plus
large, mais il est tout aussi essentiel de pouvoir arbitrer entre les
besoins métiers et leur effort de généralisation.

* Proposition d'avenir

Nous proposons dans cette partie quelques principes permettant à des
porteurs de projets numériques d'entamer une réflexion tant sur
la portée générique de leur solution, sur les arbitrages à décider dans la gestion du projet.

#FIXME: condenser, rédiger

** Penser générique - en général

Il faut donc penser aux réutilisations futures du projet, mais ne pas être paralyé par une ambition trop large.  
La première étape de cette pensée générique est de décomposer son problème en sous-parties: ce qui peut être repris et adapté ou ce qui doit être développé depuis zéro. 
Il faut ensuite regarder l'existant pour ne pas réinventer la roue : cela va d'applications "clés en main" open source à des bibliothèques de script. 
Réutiliser ne veut pas dire être limité: il faut adapter au besoin métier. 
Mais il est plus simple de chercher à gagner en généralité à partir d'un élément précis du projet plutôt que sur l'ensemble.
Enfin, il est important d'utiliser des technologies open source: les briques libres peuvent être adaptées et partagées plus facilement.

** Penser générique - une méthode

Comment faire alors? Dans un premier temps, il faut abstraire son propre besoin : le problématiser en tentant de faire ressortir les principes clés. 
Si votre problème est "mon service a besoin de montrer sur une carte les indicateurs de pauvreté des populations" on peut imaginer une problématisation telle que  "nous avons besoin d'un système permettant de récupérer des données dynamiques géolocalisées et de les afficher sur une carte en ligne". 
  
Il faut ensuite tester sa problématique en en parlant à différentes personnes et la faire évoluer jusqu'à pouvoir expliquer son propre besoin de la même manière à tous.

Lorsqu'elle est bien définie, il faut décomposer cette problématique générale en sous-parties :
    - besoins : besoins de l'équipe
    - données : d'où proviennent-elles, quelles opérations faire. Le
      modèle de données doit refléter l'usage générique qui en est
      fait.
    - interfaces : à qui s'adresse ce qui est développé,
    - contraintes : de temps, de moyens, de compétences...
    
Il y aura alors certainement de nombreux composants généralisable. 
Il faut donc délimiter ce que l'on cherche à développer de manière générique de ce qui restera spécifique à notre cas d'usage. 
Une bonne approche à cette étape peut être de lister les fonctionnalités et de les classer par grandes familles.

Enfin, la conception de composants génériques se marie bien à une démarche de développement agile, itérative. 
Si certains composants peuvent être identifiés dès la phase de recherche initiale du problème métier, d'autres peuvent être extraits d'applications ou prototypes déjà développés.

>>> Ce dernier paragraphe est-il bien nécessaire?

** Penser générique - des exemples plus appliqués

- Il est plus "simple" de chercher à généraliser des
  applications/fonctionnalités liées au traitement de données (ETL,
  nettoyage, agrégation), que des applications/fonctionnalités liées à
  une interface. En effet c'est au niveau des interfaces que se
  ressentent le plus vivement les besoins métiers spécifiques, alors
  que les opérations et automatisations autour des données en amont
  des interfaces sont plus "impersonnelles".

- Exposer des APIs (Application Programming Interface) aux bons
  endroits, ou encore se connecter à des API distantes est en général
  une stratégie payante à la condition de penser l'interopérabilité
  des données.

- Utiliser une DSL (Domain Specific Language) pour exprimer les
  différences métier d'un outil générique

* Exemples concrets

TODO: choisir un ou plusieurs exemple(s) EIG ?

- tester une solution de prédiction sur une région dans l'idée de
  pouvoir la dupliquer à l'échelle nationale : PrévisSecours (repo)
- réussir à agréger des données publiées sur des pages html : OpenScraper (repo)
- développer des bibliothèques Python : TracFin (repo)
